name: "Terraform"
 
on:
  push:
    branches:
      - main
      - prod
  pull_request:

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      -
        name: Assemble Lambda
        run: |
          mkdir lambda/determine_replacements_caselaw/caselaw_extraction
          cp -r caselaw_extraction/*.py lambda/determine_replacements_caselaw/caselaw_extraction/
          cp caselaw_extraction/requirements.txt lambda/determine_replacements_caselaw/requirements.txt

          mkdir lambda/determine_replacements_caselaw/rules
          # cp caselaw_extraction/rules/citation_patterns.jsonl lambda/determine_replacements_caselaw/rules/citation_patterns.jsonl
          cp citation_patterns.jsonl lambda/determine_replacements_caselaw/

          mkdir lambda/determine_replacements_caselaw/database
          cp -r database/*.py lambda/determine_replacements_caselaw/database/

          mkdir lambda/determine_replacements_caselaw/utils
          cp -r utils/*.py lambda/determine_replacements_caselaw/utils/

          mkdir lambda/determine_replacements_legislation/legislation_extraction
          cp -r legislation_extraction/*.* lambda/determine_replacements_legislation/legislation_extraction/
          cp legislation_extraction/requirements.txt lambda/determine_replacements_legislation/
          mkdir lambda/determine_replacements_legislation/utils
          cp -r utils/*.py lambda/determine_replacements_legislation/utils/
          mkdir lambda/determine_replacements_legislation/database
          cp -r database/*.py lambda/determine_replacements_legislation/database/

          mkdir lambda/determine_replacements_abbreviations/abbreviation_extraction
          cp -r abbreviation_extraction/*.* lambda/determine_replacements_abbreviations/abbreviation_extraction/
          cp abbreviation_extraction/requirements.txt lambda/determine_replacements_abbreviations/

          mkdir lambda/determine_legislation_provisions/legislation_provisions_extraction
          cp -r legislation_provisions_extraction/*.* lambda/determine_legislation_provisions/legislation_provisions_extraction/
          cp legislation_provisions_extraction/requirements.txt lambda/determine_legislation_provisions/
          mkdir lambda/determine_legislation_provisions/replacer
          cp -r replacer/*.py lambda/determine_legislation_provisions/replacer/

          mkdir lambda/determine_oblique_references/oblique_references
          cp -r oblique_references/*.* lambda/determine_oblique_references/oblique_references/
          cp oblique_references/requirements.txt lambda/determine_oblique_references/
          mkdir lambda/determine_oblique_references/replacer
          cp -r replacer/*.py lambda/determine_oblique_references/replacer/
      - 
        name: Set Workspace
        id: set_workspace
        run: |
          prod="${{ github.event.pull_request.base.ref == 'prod' || github.ref == 'refs/head/prod' }}"
          # prod=true
          if [ "$prod" = true ]; then
            echo "::set-output name=environment::prod"
            echo "prod=true" >> $GITHUB_ENV
            # set variables for docker repo suffix and prefix
            echo "ACCOUNT_ID=893937975773" >> $GITHUB_ENV
            echo "REPO_SUFFIX=production" >> $GITHUB_ENV
            echo "TF_API_TOKEN=${{ secrets.TF_API_TOKEN_PROD }}" >> $GITHUB_ENV
            
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV

          else
            echo "::set-output name=environment::staging"
            echo "prod=false" >> $GITHUB_ENV
            echo "ACCOUNT_ID=087925987720" >> $GITHUB_ENV
            echo "REPO_SUFFIX=dev" >> $GITHUB_ENV

            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          fi
      -
        name: Build Lambda images
        # if: ${{ false }}
        run: |
          cat lambda/determine_replacements_caselaw/requirements.txt
          
          cd lambda/determine_replacements_caselaw
          
          rm /home/runner/.docker/config.json
          # echo "-------------------"
          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com
          
          echo "logged in caselaw"
          
          docker buildx build --load -t tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }} .
          echo "built caselaw"
          docker images --filter reference=tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}:latest
          echo "tagged caselaw"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}:latest

          cd ../../lambda/determine_replacements_legislation
          echo "logged in legislation"
          docker buildx build --load -t tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }} .
          echo "built legislation"
          docker images --filter reference=tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }}:latest
          echo "tagged legislation"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }}:latest

          cd ../../lambda/determine_replacements_abbreviations
          docker buildx build --load -t tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }} .
          echo "built abbreviations"
          docker images --filter reference=tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }}:latest
          echo "tagged abbreviations"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }}:latest

          cd ../../lambda/update_legislation_table
          echo "logged in legislation update"
          docker buildx build --load -t tna-s3-tna-ecr-repository-legislation-update-${{ env.REPO_SUFFIX }} .
          echo "built legislation update"
          docker images --filter reference=tna-s3-tna-ecr-repository-legislation-update-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-legislation-update-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-legislation-update-${{ env.REPO_SUFFIX }}:latest
          echo "tagged legislation update"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-legislation-update-${{ env.REPO_SUFFIX }}:latest

          cd ../../lambda/update_rules_processor
          echo "logged in rules update"
          docker buildx build --load -t tna-s3-tna-ecr-repository-rules-update-${{ env.REPO_SUFFIX }} .
          echo "built rules update"
          docker images --filter reference=tna-s3-tna-ecr-repository-rules-update-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-rules-update-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-rules-update-${{ env.REPO_SUFFIX }}:latest
          echo "tagged rules update"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-rules-update-${{ env.REPO_SUFFIX }}:latest
          
          cd ../../lambda/determine_legislation_provisions
          echo "logged in legislation provision"
          docker buildx build --load -t tna-s3-tna-ecr-repository-legislation-provision-${{ env.REPO_SUFFIX }} .
          echo "built legislation provision"
          docker images --filter reference=tna-s3-tna-ecr-repository-legislation-provision-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-legislation-provision-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-legislation-provision-${{ env.REPO_SUFFIX }}:latest
          echo "tagged legislation provision"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-legislation-provision-${{ env.REPO_SUFFIX }}:latest
          
          cd ../../lambda/determine_oblique_references
          echo "logged in oblique references"
          docker buildx build --load -t tna-s3-tna-ecr-repository-oblique-references-${{ env.REPO_SUFFIX }} .
          echo "built oblique references"
          docker images --filter reference=tna-s3-tna-ecr-repository-oblique-references-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-oblique-references-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-oblique-references-${{ env.REPO_SUFFIX }}:latest
          echo "tagged oblique references"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-oblique-references-${{ env.REPO_SUFFIX }}:latest
          
          cd ../../lambda/fetch_xml
          echo "CD'd into the fetch_xml directory"
          docker buildx build --load -t tna-s3-tna-ecr-repository-fetch-xml-${{ env.REPO_SUFFIX }} .
          echo "built fetch_xml"
          docker images --filter reference=tna-s3-tna-ecr-repository-fetch-xml-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-fetch-xml-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-fetch-xml-${{ env.REPO_SUFFIX }}:latest
          echo "tagged fetch xml"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-fetch-xml-${{ env.REPO_SUFFIX }}:latest
          if [[ "${env.REPO_SUFFIX}" != "production" ]]; then
            docker buildx build --load -t tna-s3-tna-ecr-repository-fetch-xml-production .
            docker tag tna-s3-tna-ecr-repository-fetch-xml-production:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-fetch-xml-production:latest
            docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-fetch-xml-production:latest
          fi

  terraform:
    name: "Terraform"
    needs: [buildx]
    runs-on: ubuntu-latest

    env:
      region: eu-west-2

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy Python into Lambda
        id: move
        run: |
          mkdir lambda/extract_judgement_contents/utils
          cp -r utils/*.py lambda/extract_judgement_contents/utils/

          mkdir -p lambda/make_replacements/replacer
          cp -r replacer/*.py lambda/make_replacements/replacer/
 
      - name: Set Workspace
        id: set_workspace
        run: |
          # prod=true
          prod="${{ github.event.pull_request.base.ref == 'main' || github.ref == 'refs/head/main' }}"
          if [ "$prod" = true ]; then
          # if [ ${{ env.prod }} = true ]; then
            echo "::set-output name=environment::tna-prod"
            # echo "::set-output name=account_id::893937975773"
            # set variables for docker repo suffix and prefix
            echo "DEPLOYMENT_ENVIRONMENT=production" >> $GITHUB_ENV
            echo "TF_API_TOKEN=${{ secrets.TF_API_TOKEN_PROD }}" >> $GITHUB_ENV

            # environment="dev"
            # name
            # s3 bucket prefix bucket_prefix app_env="tna-mxt-staging" environment
            echo "ACCOUNT_ID=893937975773" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
          else
            echo "::set-output name=environment::tna-staging"
            # echo "DEPLOYMENT_ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "DEPLOYMENT_ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "TF_API_TOKEN=${{ secrets.TF_API_TOKEN }}" >> $GITHUB_ENV
            echo "ACCOUNT_ID=087925987720" >> $GITHUB_ENV
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

          fi
          echo "::add-mask::${{ env.AWS_ACCESS_KEY_ID }}"
          echo "::add-mask::${{ env.AWS_SECRET_ACCESS_KEY }}"

      - name: Check Workspace
        id: check_workspace
        run: |          
          echo "workspace = ${{ steps.set_workspace.outputs.environment }}"


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: eu-west-2
              # role-to-assume: arn:aws:iam::846769538626:role/GithubOIDCProviderIAMRolePermissions-Role-I80RXHT6O1PL
              # role-session-name: MySessionName
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        # with:
        #   # terraform_version: 0.13.0:
        #   # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        #   cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Define Backend S3 Bucket
        run: |
          echo "terraform_backend_bucket=tna-terraform-backend-state-enrichment-pipeline-${{ env.ACCOUNT_ID }}" >> $GITHUB_ENV

      - name: Create Backend S3 Bucket
        run: |          
          echo ${{ env.terraform_backend_bucket }}
          echo AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} aws s3 ls "s3://${{ env.terraform_backend_bucket }}" --region eu-west-2 2>&1

          if 
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} aws s3 ls "s3://${{ env.terraform_backend_bucket }}" --region eu-west-2 2>&1 | grep -q 'NoSuchBucket'
          then 
            echo "attepting to create bucket"
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} aws s3api create-bucket \
              --bucket ${{ env.terraform_backend_bucket }} \
              --region eu-west-2 \
              --create-bucket-configuration LocationConstraint=eu-west-2
             echo "attepting to restrict bucket permission"
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} aws s3api put-public-access-block \
              --bucket ${{ env.terraform_backend_bucket }} \
              --region eu-west-2 \
              --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
          else
            echo 'Bucket Already Exists'
          fi

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check -diff

      - name: Terraform Init
        id: init
        run: terraform init -upgrade -backend-config="bucket=${{ env.terraform_backend_bucket}}"
        # run: terraform init -upgrade -backend-config="bucket=fakebucket"
        env:
          TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}
          #TF_LOG: TRACE

      - name: Check TF
        id: check_tf
        run: |          
          echo "tf workspace = ${{ steps.set_workspace.outputs.environment }}"

      # -var "environment=prod"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
            TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}

      - uses: actions/setup-python@v3
        with:
          python-version: '3.8'
          architecture: 'x64'

      - name: Check Python
        run: |
          python --version

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        # run: terraform plan -no-color
        # run: echo "plan called ${{ steps.set_workspace.outputs.environment }} -- ${{ env.DEPLOYMENT_ENVIRONMENT }}"
        run: terraform plan -no-color -var "app_env=${{ env.DEPLOYMENT_ENVIRONMENT }}"
        continue-on-error: true
        env:
          TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}
          #TF_LOG: TRACE
          # -var "backend_bucket=${{ env.terraform_backend_bucket}}"

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        env:
          TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var "app_env=${{ env.DEPLOYMENT_ENVIRONMENT }}"

        env:
          TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}
