name: "Terraform"
 
on:
  push:
    branches:
      - master
      - tna_prod
  pull_request:

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      -
        name: Assemble Lambda
        run: |
          mkdir lambda/determine_replacements_caselaw/caselaw_extraction
          cp -r caselaw_extraction/*.py lambda/determine_replacements_caselaw/caselaw_extraction/
          cp caselaw_extraction/requirements.txt lambda/determine_replacements_caselaw/requirements.txt

          mkdir lambda/determine_replacements_caselaw/rules
          # cp caselaw_extraction/rules/citation_patterns.jsonl lambda/determine_replacements_caselaw/rules/citation_patterns.jsonl
          cp citation_patterns.jsonl lambda/determine_replacements_caselaw/

          mkdir lambda/determine_replacements_caselaw/database
          cp -r database/*.py lambda/determine_replacements_caselaw/database/

          mkdir lambda/determine_replacements_caselaw/utils
          cp -r utils/*.py lambda/determine_replacements_caselaw/utils/

          mkdir lambda/determine_replacements_legislation/legislation_extraction
          cp -r legislation_extraction/*.* lambda/determine_replacements_legislation/legislation_extraction/
          cp legislation_extraction/requirements.txt lambda/determine_replacements_legislation/
          mkdir lambda/determine_replacements_legislation/utils
          cp -r utils/*.py lambda/determine_replacements_legislation/utils/
          mkdir lambda/determine_replacements_legislation/database
          cp -r database/*.py lambda/determine_replacements_legislation/database/

          mkdir lambda/determine_replacements_abbreviations/abbreviation_extraction
          cp -r abbreviation_extraction/*.* lambda/determine_replacements_abbreviations/abbreviation_extraction/
          cp abbreviation_extraction/requirements.txt lambda/determine_replacements_abbreviations/
      - 
        name: Set Workspace
        id: set_workspace
        run: |
          prod="${{ github.event.pull_request.base.ref == 'tna_prod' || github.ref == 'refs/head/tna_prod' }}"
          if [ "$prod" = true ]; then
            echo "::set-output name=environment::prod"
            # echo "::set-output name=account_id::893937975773"
            # set variables for docker repo suffix and prefix
            echo "ACCOUNT_ID=893937975773" >> $GITHUB_ENV
            echo "REPO_SUFFIX=prod" >> $GITHUB_ENV
            echo "REPO_SUFFIX=prod" >> $GITHUB_ENV
            # echo "DEPLOYMENT_ENVIRONMENT=production" >> $GITHUB_ENV
            echo "TF_API_TOKEN=${{ secrets.TF_API_TOKEN_PROD }}" >> $GITHUB_ENV
            
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

            # environment="dev"
            # name
            # s3 bucket prefix bucket_prefix app_env="tna-mxt-staging" environment
          else
            echo "::set-output name=environment::staging"
            # echo "::set-output name=account_id::087925987720"
            echo "ACCOUNT_ID=087925987720" >> $GITHUB_ENV
            echo "REPO_SUFFIX=dev" >> $GITHUB_ENV
            # echo "DEPLOYMENT_ENVIRONMENT=staging" >> $GITHUB_ENV
            # echo "DEPLOYMENT_ENVIRONMENT=dev" >> $GITHUB_ENV

            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
          fi
      -
        name: Build Lambda images
        if: ${{ false }}
        run: |
          cat lambda/determine_replacements_caselaw/requirements.txt
          # docker pull hello-world
          cd lambda/determine_replacements_caselaw
          # cat /home/runner/.docker/config.json
          rm /home/runner/.docker/config.json
          # echo "-------------------"
          #AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 087925987720.dkr.ecr.eu-west-2.amazonaws.com
          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 087925987720.dkr.ecr.eu-west-2.amazonaws.com
          # aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}:latest
          echo "logged in caselaw"
          # cat /home/runner/.docker/config.json
          docker buildx build --load -t tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }} .
          echo "built caselaw"
          docker images --filter reference=tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}:latest
          echo "tagged caselaw"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}:latest

          # cat lambda/determine_replacements_legislation/requirements.txt
          # docker pull hello-world
          cd ../../lambda/determine_replacements_legislation
          # sudo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com
          # aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}:latest
          # echo "logged in legislation"
          docker buildx build --load -t tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }} .
          # echo "built legislation"
          docker images --filter reference=tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }}:latest
          echo "tagged legislation"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-legislation-${{ env.REPO_SUFFIX }}:latest

          cd ../../lambda/determine_replacements_abbreviations
          # sudo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com
          # aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-${{ env.REPO_SUFFIX }}:latest
          # echo "logged in legislation"
          docker buildx build --load -t tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }} .
          echo "built abbreviations"
          docker images --filter reference=tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }}
          docker tag tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }}:latest ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }}:latest
          echo "tagged abbreviations"
          docker push ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/tna-s3-tna-ecr-repository-abbreviations-${{ env.REPO_SUFFIX }}:latest


  terraform:
    name: "Terraform"
    needs: [buildx]
    runs-on: ubuntu-latest
    # container:
    #   image: hashicorp/terraform:light
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # setting earlier in the process
      # - name: Set Workspace
      #   id: set_workspace
      #   run: |
      #     prod="${{ github.event.pull_request.base.ref == 'tna_prod' || github.ref == 'refs/head/tna_prod' }}"
      #     if [ "$prod" = true ]; then
      #       echo "::set-output name=environment::tna-prod"
      #     else
      #       echo "::set-output name=environment::tna-staging"
      #     fi

      - name: Copy Python into Lambda
        id: move
        run: |
          mkdir lambda/extract_judgement_contents/utils
          cp -r utils/*.py lambda/extract_judgement_contents/utils/

          mkdir -p lambda/make_replacements/replacer
          cp -r replacer/*.py lambda/make_replacements/replacer/

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1
      #     aws ecr get-login-password --region ${var.aws_region} | docker login --username AWS --password-stdin ${split("/", aws_ecr_repository.main.repository_url)[0]}:${var.container_image_tag}
      #     docker pull hello-world
      #     docker tag hello-world:latest ${aws_ecr_repository.main.repository_url}:${var.container_image_tag}
      #     docker push ${aws_ecr_repository.main.repository_url}:${var.container_image_tag}
 
      - name: Set Workspace
        id: set_workspace
        run: |
          prod=true
          # prod="${{ github.event.pull_request.base.ref == 'master' || github.ref == 'refs/head/master' }}"
          if [ "$prod" = true ]; then
            echo "::set-output name=environment::tna-prod"
            # echo "::set-output name=account_id::893937975773"
            # set variables for docker repo suffix and prefix
            echo "DEPLOYMENT_ENVIRONMENT=production" >> $GITHUB_ENV
            echo "TF_API_TOKEN=${{ secrets.TF_API_TOKEN_PROD }}" >> $GITHUB_ENV

            # environment="dev"
            # name
            # s3 bucket prefix bucket_prefix app_env="tna-mxt-staging" environment
          else
            echo "::set-output name=environment::tna-staging"
            # echo "DEPLOYMENT_ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "DEPLOYMENT_ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "TF_API_TOKEN=${{ secrets.TF_API_TOKEN }}" >> $GITHUB_ENV

          fi

      - name: Check Workspace
        id: check_workspace
        run: |          
          echo "workspace = ${{ steps.set_workspace.outputs.environment }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check -diff

      - name: Terraform Init
        id: init
        run: terraform init -upgrade
        env:
          TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}
          TF_LOG: TRACE

      # - name: Terraform Workspace Select
      #   id: workspace_select
      #   run: terraform workspace select ${{ steps.set_workspace.outputs.environment }}
      #   env:
      #     TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}
      #     TF_LOG: TRACE
          

      - name: Check TF
        id: check_tf
        run: |          
          echo "tf workspace = ${{ steps.set_workspace.outputs.environment }}"

      # -var "environment=prod"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
            TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}

      - uses: actions/setup-python@v3
        with:
          python-version: '3.8'
      # - name: Install dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     python -m pip install flake8 pytest
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #   run: |
      #     pytest

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        # run: terraform plan -no-color
        # run: echo "plan called ${{ steps.set_workspace.outputs.environment }} -- ${{ env.DEPLOYMENT_ENVIRONMENT }}"
        run: terraform plan -no-color -var "app_env=${{ env.DEPLOYMENT_ENVIRONMENT }}"
        continue-on-error: true
        env:
          TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        env:
          TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}

      - name: Terraform Apply
        if: ${{ false }}  # disable for now
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        # if: (github.ref == 'refs/heads/master' || github.ref == 'refs/head/tf_prod') && github.event_name == 'push'
        # run: terraform apply -auto-approve
        run: echo "apply called ${{ steps.set_workspace.outputs.environment }} -- ${{ env.DEPLOYMENT_ENVIRONMENT }}"
        env:
          TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}
  # # test:
  # #   runs-on: ubuntu-latest
  # #   strategy:
  # #     matrix:
  # #       include:
  # #         - TEST_NAME: "Latest v2"
  # #           AWS_CLI_VERSION: "2"
  # #         - TEST_NAME: "Specific v2"
  # #           AWS_CLI_VERSION: "2.0.30"
  # #         - TEST_NAME: "Latest v1"
  # #           AWS_CLI_VERSION: "1"
  # #         - TEST_NAME: "Specific v1"
  # #           AWS_CLI_VERSION: "1.18.1"
  # #         - TEST_NAME: "No Input"
  # #   name: Test ${{ matrix.TEST_NAME }} ${{ matrix.AWS_CLI_VERSION }}
  # #   steps:
  # #     - name: Test ${{ matrix.TEST_NAME }}
  # #       id: install-aws-cli
  # #       uses: unfor19/install-aws-cli-action@master
  # #       with:
  # #         version: ${{ matrix.AWS_CLI_VERSION }}
  # #     - run: aws --version
  # #       shell: bash