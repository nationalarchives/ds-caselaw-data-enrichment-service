import os
import re

import lxml

os.environ["DEST_BUCKET"] = "PLACEHOLDER"
from lambdas.determine_legislation_provisions.index import (  # noqa: E402
    add_timestamp_and_engine_version,
)


def xml_valid_and_can_get_version(xml):
    """
    The critical assertion here is that `lxml.etree.fromstring()` does not raise an exception,
    implying that the data is valid XML.

    We then go on to check that we can get the value of the `uk:tna-enrichment-engine`
    node and that it looks like a version.
    """
    root = lxml.etree.fromstring(xml)  # raises error if not valid XML
    version = root.xpath(
        "//example:tna-enrichment-engine/text()",
        namespaces={"example": "https://caselaw.nationalarchives.gov.uk/akn"},
    )[0]
    return re.search(r"\d+\.\d+\.\d+", version)


def test_engine_version_valid_xml_without_namespace_is_valid():
    """
    A namespace can be defined in XML in either the node that uses it or any parent node.
    If the `uk` namespace is defined in every node it is used in, rather than the root node,
    then adding a new `uk:tna-enrichment-engine` node leaves that namespace undefined,
    so we must define it ourselves.
    We check that the XML generated by this process is valid and has a version.
    """

    xml_in = (
        "<xml><proprietary/><FRBRManifestation><FRBRdate/></FRBRManifestation></xml>"
    )
    xml_output = str(add_timestamp_and_engine_version(xml_in)).encode("utf-8")
    assert xml_valid_and_can_get_version(xml_output)


def test_engine_version_valid_xml_with_namespace_is_valid():
    """
    Since we have now added an explicit namespace for the `uk:tna-enrichment-engine` node,
    we also check that this doesn't cause any problems in the usual case where the namespace
    is defined in the opening tag.
    """
    xml_in = '<xml xmlns:uk="https://caselaw.nationalarchives.gov.uk/akn"><proprietary/><FRBRManifestation><FRBRdate/></FRBRManifestation></xml>'
    xml_output = str(add_timestamp_and_engine_version(xml_in)).encode("utf-8")
    assert xml_valid_and_can_get_version(xml_output)
